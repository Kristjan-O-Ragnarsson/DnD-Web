{"version":3,"sources":["components/formcomponents.js","App.js","serviceWorker.js","index.js"],"names":["fetchLoading","fetchName","key","text","fetchError","err","message","loadRaces","a","fetch","then","res","ok","Promise","reject","json","loadClasses","setSelectOptions","obj","tempObject","_key","push","value","skillSelect","Athletics","other","Acrobatics","Arcana","toolProfSelect","Thieves","Instrument","Jewelers","languageSelect","Common","Dwarven","Abyssal","featureSelect","placeholderFeature1","placeholderFeature2","placeholderFeature3","ChangeLevel","props","Form","Input","type","label","width","onChange","e","lvl","target","update","Math","floor","SelectRace","_placeholder","_options","useAsync","promiseFn","data","error","isLoading","results","name","map","race","Field","Dropdown","placeholder","selection","scrolling","options","SelectClass","_class","FormInfo","CharacterInfo","state","class","level","proficiency","str","dex","con","int","wis","char","updateStat","bind","this","setState","console","log","Fragment","Group","React","Component","AbilityTable","abilities","headers","id","base","raceMod","otherMod","elems","ability","forEach","i","Table","Row","Cell","fluid","size","updateAbilityScore","headerCells","header","HeaderCell","fillStateElems","unstackable","striped","textAlign","compact","Header","Body","Background","as","dividing","inline","Button","multiple","search","Radio","Personality","TextArea","rows","App","Container","className","Segment","Grid","columns","stackable","divided","stretched","Column","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71b72525.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Header, Table, Dropdown } from 'semantic-ui-react';\r\nimport { useAsync } from \"react-async\";\r\n\r\n/**************************************************************\r\n *                                                            *\r\n *                Helpers and placeholders                    *\r\n *                                                            *\r\n **************************************************************/\r\nfunction fetchLoading(fetchName) {\r\n  // Should return as: _placeholder = \"loading\" and _options=[{key: , text:}]\r\n  return [\r\n    \"loading\",\r\n    [{key:`${fetchName}_loading`, text:\"loading\"}]\r\n  ];\r\n}\r\nfunction fetchError(err, fetchName) {\r\n  return [\r\n    `Something went wrong: ${err.message}`,\r\n    [{key:`${fetchName}_error`, text:\"error\"}]\r\n  ];\r\n}\r\n\r\n// Fetching D&D data from a Flask API\r\nconst loadRaces = async () => await fetch(\"https://api.open5e.com/races/\")\r\n  .then(res => (res.ok ? res : Promise.reject(res)))\r\n  .then(res => res.json());\r\nconst loadClasses = async () => await fetch(\"https://api.open5e.com/classes/\")\r\n  .then(res => (res.ok ? res : Promise.reject(res)))\r\n  .then(res => res.json());\r\n\r\n// Some placeholder values - would be removed in later versions\r\nconst skills = {\r\n  Athletics: {value: 0, other: \"placeholder?\"},\r\n  Acrobatics: {value: 0, other: \"placeholder?\"},\r\n  Arcana: {value: 0, other: \"placeholder?\"}\r\n};\r\nconst toolProfs = {\r\n  Thieves: {value: 0, other: \"placeholder?\"},\r\n  Instrument: {value: 0, other: \"placeholder?\"},\r\n  Jewelers: {value: 0, other: \"placeholder?\"}\r\n};\r\nconst languages = {\r\n  Common: {value: 0, other: \"placeholder?\"},\r\n  Dwarven: {value: 0, other: \"placeholder?\"},\r\n  Abyssal: {value: 0, other: \"placeholder?\"}\r\n};\r\nconst features = {\r\n  placeholderFeature1: {value: 0, other: \"placeholder?\"},\r\n  placeholderFeature2: {value: 0, other: \"placeholder?\"},\r\n  placeholderFeature3: {value: 0, other: \"placeholder?\"}\r\n}\r\nfunction setSelectOptions(obj) {\r\n  let tempObject = [];\r\n  for (let _key in obj) {\r\n    tempObject.push(\r\n      {key: _key, text: _key, value: _key}\r\n    );\r\n  };\r\n  return tempObject;\r\n}\r\nconst skillSelect = setSelectOptions(skills);\r\nconst toolProfSelect = setSelectOptions(toolProfs);\r\nconst languageSelect = setSelectOptions(languages);\r\nconst featureSelect = setSelectOptions(features);\r\n\r\n/**************************************************************\r\n *                                                            *\r\n *             Parent component and form fiels                *\r\n *              This is the main section. It is               *\r\n *              split up into smaller sections                *\r\n *                                                            *\r\n **************************************************************/\r\n\r\n /**********************\r\n  *   Parent component *\r\n  **********************/\r\nclass CharacterInfo extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      race: \"\",\r\n      class: \"\",\r\n      level: 0,\r\n      proficiency: 0,\r\n      str: 0,\r\n      dex: 0,\r\n      con: 0,\r\n      int: 0,\r\n      wis: 0,\r\n      char: 0\r\n    }\r\n    this.updateStat = this.updateStat.bind(this);\r\n  }\r\n\r\n  // Update state with key value pairs\r\n  updateStat(key, value) { this.setState({[key]: value}); console.log(this.state); }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <Form.Group>\r\n          <Form.Input label=\"Character name\" width={6} />\r\n          <Form.Input label=\"Player name\" width={6} />\r\n          <ChangeLevel update={this.updateStat}/>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <SelectRace update={this.updateStat} />\r\n          <SelectClass update={this.updateStat} />\r\n          <Form.Input label=\"Proficiency\" width={2} value={this.state.proficiency} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Input label=\"HP\" width={2} />\r\n          <Form.Input label=\"AC\" width={2} />\r\n          <Form.Input label=\"Initiative\" width={2} />\r\n          <Form.Input label=\"Speed\" width={2} />\r\n        </Form.Group>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n/*********************************\r\n*   Handling leveling formula    *\r\n**********************************/\r\nfunction ChangeLevel(props) {\r\n  // This function includes a simple formula that automatically \r\n  // increases the proficiency score based on the official rules\r\n  function handleLevelChange(e) {\r\n    let lvl = e.target.value;\r\n    props.update(\"level\", lvl);\r\n    props.update(\"proficiency\", Math.floor((lvl-1)/4)+2);\r\n  }\r\n  return(\r\n    <Form.Input type=\"number\" label=\"Level\" width={3} onChange={handleLevelChange}/>\r\n  );\r\n}\r\n\r\n/*********************************\r\n *   Level and class selection   *\r\n *********************************/\r\n// SelectRace and SelectClass are almost identical. \r\n// We use a library called React-Async to fetch data and check for\r\n// the conditions isLoading, error and data (data is the result of fetching)\r\nfunction SelectRace(props) {\r\n  let _placeholder = \"\";\r\n  let _options = [];\r\n  const { data, error, isLoading } = useAsync({ promiseFn: loadRaces });\r\n  if (isLoading) [_placeholder, _options] = fetchLoading(\"race\"); \r\n  if (error) [_placeholder, _options] = fetchError(error.message, \"race\");\r\n  if (data) {\r\n    _placeholder = data.results[0].name;\r\n    _options = data.results.map(race => {\r\n      return {key:`race_${race.name}`, text:race.name, value:race.name};\r\n    });\r\n  }\r\n\r\n  function updateParent(e, { value }) {\r\n    props.update(\"race\", value);\r\n  }\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Select a race</label>\r\n      <Dropdown\r\n        placeholder={_placeholder}\r\n        selection\r\n        scrolling\r\n        options={_options}\r\n        onChange={updateParent}\r\n        />\r\n      </Form.Field>\r\n  );\r\n}\r\n\r\nfunction SelectClass(props) {\r\n  let _placeholder = \"\";\r\n  let _options = [];\r\n  const { data, error, isLoading } = useAsync({ promiseFn: loadClasses });\r\n  if (isLoading) [_placeholder, _options] = fetchLoading(\"class\"); \r\n  if (error) [_placeholder, _options] = fetchError(error.message, \"class\");\r\n  if (data) {\r\n    _placeholder = data.results[0].name;\r\n    _options = data.results.map(_class => {\r\n      return {key:`class_${_class.name}`, text:_class.name, value:_class.name};\r\n    });\r\n  }\r\n\r\n  function updateParent(e, { value }) {\r\n    props.update(\"class\", value);\r\n  }\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Select a class</label>\r\n      <Dropdown\r\n        placeholder={_placeholder}\r\n        selection\r\n        scrolling\r\n        options={_options}\r\n        onChange={updateParent}\r\n        />\r\n      </Form.Field>\r\n  );\r\n}\r\n\r\n /*********************************\r\n  *   This is the ability table   *\r\n  *   It is str, dex, con, etc.   *\r\n  *********************************/\r\nclass AbilityTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.abilities = [\"str\", \"dex\", \"con\", \"int\", \"wis\", \"char\"];\r\n    this.headers = [\"Ability\", \"Base\", \"Race\", \"Other\", \"Sum\"];\r\n    this.state = {\r\n      abilities: [\r\n        { name: \"Strength\", id: \"str\", base: 0, raceMod: 0, otherMod: 0 },\r\n        { name: \"Dexterity\", id: \"dex\", base: 0, raceMod: 0, otherMod: 0 },\r\n        { name: \"Constition\", id: \"con\", base: 0, raceMod: 0, otherMod: 0 },\r\n        { name: \"Intelligence\", id: \"int\", base: 0, raceMod: 0, otherMod: 0 },\r\n        { name: \"Wisdom\", id: \"wis\", base: 0, raceMod: 0, otherMod: 0 },\r\n        { name: \"Charisma\", id: \"char\", base: 0, raceMod: 0, otherMod: 0 },\r\n      ],\r\n      elems: []\r\n    };\r\n  }\r\n\r\n  // This function does not work and needs to be worked on. I couldn't get to it in time\r\n  updateAbilityScore(ability) {\r\n    return ability.base + ability.raceMod + ability.otherMod;\r\n  }\r\n\r\n  fillStateElems() {\r\n    this.state.abilities.forEach((ability, i) => {\r\n      let key = ability.id;\r\n      this.state.elems.push(\r\n        <Table.Row key={\"row-\" + key}>\r\n          <Table.Cell key={key + \"-name\"} >{ability.name}</Table.Cell>\r\n          <Table.Cell key={key + \"-base\"} >\r\n            <Form.Input id={ability.id} fluid type=\"number\" size=\"mini\" value={ability.base} />\r\n          </Table.Cell>\r\n          <Table.Cell key={key + \"-race\"} >{ability.raceMod}</Table.Cell>\r\n          <Table.Cell key={key + \"-other\"} >{ability.otherMod}</Table.Cell>\r\n          <Table.Cell key={key + \"-sum\"} >{this.updateAbilityScore(ability)}</Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    let headerCells = this.headers.map((header, i) => <Table.HeaderCell key={i}>{header}</Table.HeaderCell>);\r\n\r\n    this.fillStateElems();\r\n\r\n    return (\r\n      <Table unstackable striped textAlign=\"center\" compact>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            {headerCells}\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {this.state.elems}\r\n        </Table.Body>\r\n\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n/*********************************\r\n*   This section is for          *\r\n*   background selection         *\r\n**********************************/\r\nfunction Background(props) {\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <Header as=\"h4\" dividing>Background</Header>,\r\n    <Form.Group inline>\r\n      <Form.Input label=\"Name:\" />\r\n      <Form.Button label=\"&nbsp;\">Create new</Form.Button>\r\n    </Form.Group>,\r\n    <Form.Group inline>\r\n      <Dropdown \r\n        placeholder=\"Select two skills\" \r\n        fluid \r\n        multiple \r\n        search\r\n        selection \r\n        options={skillSelect} \r\n      />\r\n    </Form.Group>,\r\n    <Form.Group inline>\r\n      <Form.Radio label=\"Tool\" value=\"tool1\"/>\r\n      <Form.Radio label=\"Language\" value=\"lang1\"/>\r\n      - Divider -\r\n      <Form.Radio label=\"Tool\" value=\"tool2\"/>\r\n      <Form.Radio label=\"Language\" value=\"lang2\"/>\r\n    </Form.Group>,\r\n    <Form.Group>\r\n      <Dropdown \r\n        placeholder=\"Select a proficiency\" \r\n        fluid\r\n        search\r\n        selection \r\n        options={toolProfSelect} \r\n      />\r\n      <Dropdown\r\n        placeholder=\"Select a language\" \r\n        fluid\r\n        search\r\n        selection \r\n        options={languageSelect} \r\n      />\r\n    </Form.Group>\r\n    <Form.Group>\r\n      <Dropdown\r\n        placeholder=\"Select a feature\" \r\n        fluid\r\n        search\r\n        selection \r\n        options={featureSelect} \r\n      />\r\n    </Form.Group>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n/**************************************\r\n*   Section for personality options   *\r\n***************************************/\r\nfunction Personality(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <Form.TextArea key={\"persTraits\"} rows={2} label=\"Personality traits\" />\r\n      <Form.TextArea key={\"ideals\"} rows={1} label=\"Ideals\" />\r\n      <Form.TextArea key={\"bonds\"} rows={1} label=\"Bonds\" />\r\n      <Form.TextArea key={\"flaws\"} rows={1} label=\"Flaws\" />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n// Gather all of our components into a variable\r\n// Ideally this would just be one class with a reference to each component\r\nconst FormInfo = { CharacterInfo, AbilityTable, Background, Personality };\r\n\r\n// Export the form to be plugged into the final website\r\nexport default FormInfo;","import React from 'react';\nimport './App.css';\nimport { Container, Form, Grid, Segment } from 'semantic-ui-react';\nimport FormInfo from \"./components/formcomponents.js\";\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <Form>\n\n        {/**/}\n        <Segment>\n          {/* Basic information */}\n          {/* First Row - wrapping around the first row of columns. */}\n          <Grid columns={2} stackable divided>\n            {/* Grid Column 1 */}\n            <Grid.Row stretched>\n              <Grid.Column stretched>\n\n                <Segment>\n                  <FormInfo.CharacterInfo />\n                </Segment>\n\n              </Grid.Column>\n\n              {/* Grid Column 2 */}\n              <Grid.Column>\n\n                <FormInfo.AbilityTable />\n              </Grid.Column>\n            </Grid.Row>\n\n            {/* -------------------------------------------------------------- */}\n\n            {/* Personality and background */}\n            {/* Second Row - wrapping around the sceond row of columns */}\n            {/* Grid Column 1 */}\n            <Grid.Row>\n              <Grid.Column>\n                <FormInfo.Background />\n              </Grid.Column>\n\n              {/* Grid Column 2 */}\n              <Grid.Column>\n                <FormInfo.Personality />\n              </Grid.Column>\n            </Grid.Row>\n\n            {/* -------------------------------------------------------------- */}\n\n            {/* Personality and description */}\n            {/* Third Row - wrapping around the third row of columns */}\n            {/* Grid Column 1 */}\n            <Grid.Row>\n              <Grid.Column>\n\n              </Grid.Column>\n\n              {/* Grid Column 2 */}\n              <Grid.Column>\n\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n\n      </Form>\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}